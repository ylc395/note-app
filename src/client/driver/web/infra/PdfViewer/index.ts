import { GlobalWorkerOptions, type PDFDocumentLoadingTask, getDocument } from 'pdfjs-dist';
import { EventBus, ScrollMode, PDFViewer } from 'pdfjs-dist/web/pdf_viewer';
import PdfJsWorkerUrl from 'pdfjs-dist/build/pdf.worker.min.js?worker&url';
import debounce from 'lodash/debounce';

import './style.css';

// worker url generated by vite is not suitable for pdfjs since it's always "type=module" during dev
// while pdfjs doesn't load esmodule worker. see https://github.com/mozilla/pdf.js/blob/2c0478ecb2aa144230f8afbda5f411f82cb2b4fa/src/display/api.js#L2137
GlobalWorkerOptions.workerSrc = PdfJsWorkerUrl.replace('type=module', 'type=classic');

interface Options {
  container: HTMLDivElement;
  viewer: HTMLDivElement;
  onTextSelected: () => void;
  onTextSelectCancel: () => void;
}

export default class PdfViewer {
  private readonly pdfViewer: PDFViewer;
  private loadingTask?: PDFDocumentLoadingTask;

  constructor(private readonly options: Options) {
    this.pdfViewer = PdfViewer.createPDFViewer(options);
  }

  private static createPDFViewer(options: Options) {
    const pdfViewer = new PDFViewer({ ...options, eventBus: new EventBus() });
    pdfViewer.scrollMode = ScrollMode.PAGE;
    pdfViewer.currentScaleValue = 'auto';

    return pdfViewer;
  }

  async load(blob: ArrayBuffer) {
    if (this.loadingTask) {
      throw new Error('loaded');
    }

    this.loadingTask = getDocument({ data: blob });

    const doc = await this.loadingTask.promise;
    this.pdfViewer.setDocument(doc);

    document.addEventListener('selectionchange', this.handleSelection);
  }

  private readonly handleSelection = debounce(() => {
    const selection = window.getSelection();
    const viewerEl = this.pdfViewer.viewer;

    if (
      !selection ||
      selection.isCollapsed ||
      !viewerEl ||
      !viewerEl.contains(selection.anchorNode) ||
      !viewerEl.contains(selection.focusNode)
    ) {
      this.options.onTextSelectCancel();
    } else {
      this.options.onTextSelected();
    }
  }, 300);

  goToPage(page: number) {
    this.pdfViewer.currentPageNumber = page;
  }

  goToNextPage() {
    return this.pdfViewer.nextPage();
  }

  goToPreviousPage() {
    return this.pdfViewer.previousPage();
  }

  destroy() {
    this.pdfViewer.cleanup();
    this.loadingTask?.destroy();
    document.removeEventListener('selectionchange', this.handleSelection);
  }

  getState() {
    return {
      page: this.pdfViewer.currentPageNumber,
    };
  }

  setScale(value: string) {
    this.pdfViewer.currentScaleValue = value;
  }
}
